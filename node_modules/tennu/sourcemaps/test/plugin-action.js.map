{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/plugin-action.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","logger","info","notice","warn","error","plugin","message","channel","nickname","nicknamefn","ActionPlugin","EventEmitter","describe","socket","out","messageHandler","beforeEach","raw","spy","init","_socket","note","on","handlers","Object","keys","forEach","key","off","exports","it","channel$2","topic","topicSetter","topicSetTimestamp","nicknames","joinmsg","topicmsg","topicwhotimemsg","who","timestamp","namesmsg","endofnamesmsg","promise","join","then","result","joinInfo","ok","calledWithExactly","names","setter","emit","skip","clock","useFakeTimers","afterEach","restore","done","catch","err","Error","tick","mode","firstCall","args","say","part","quit","kick"],"mappings":"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","file":"plugin-action.js","sourcesContent":["const sinon = require(\"sinon\");\nconst assert = require(\"better-assert\");\nconst equal = require(\"deep-eql\");\nconst inspect = require(\"util\").inspect;\nconst format = require(\"util\").format;\nrequire(\"source-map-support\").install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\nconst logger = {\n    debug: logfn, info: logfn, notice: logfn, warn: logfn,\n    error: function (plugin, message) {logfn(plugin, message); assert(message !== false);}\n};\n\nconst channel = \"#test\";\nconst nickname = \"testbot\";\n\nconst nicknamefn = function () { return nickname; };\n\nconst ActionPlugin = require(\"../tennu_plugins/action\");\nconst EventEmitter = require(\"after-events\");\n\ndescribe \"IRC Output Socket:\" {\n    var socket, out, messageHandler;\n\n    beforeEach {\n        logfn(/* newline */);\n        messageHandler = new EventEmitter();\n        socket = { raw: sinon.spy() };\n        out = ActionPlugin.init({\n            _socket: socket,\n            //messageHandler,\n            nickname: nicknamefn,\n            debug: logfn,\n            info: logfn,\n            note: logfn,\n            error: logfn,\n            on: function (handlers) {\n                Object.keys(handlers).forEach(function (key) {\n                    messageHandler.on(key, handlers[key]);\n                });\n            },\n\n            off: function (handlers) {\n                Object.keys(handlers).forEach(function (key) {\n                    messageHandler.off(key, handlers[key]);\n                });\n            }\n        }).exports;\n    }\n\n    describe \"Join\" {\n        describe \"A single channel\" {\n            it \"resolves to Ok(JoinInfo) when succeeded\" {\n                // JOIN #success\n                // :testbot!tennu@tennu.github.io JOIN :#success\n                // :irc.server.net 332 testbot #success :Topic for #success.\n                // :irc.server.net 333 testbot #success topic-changer 1333333333\n                // :irc.server.net 353 testbot @ #success :testbot @topic-changer other-user\n                // :irc.server.net 366 testbot #success :End of /NAMES list.\n                const channel = \"#success\";\n                const topic = \"Topic for #success.\";\n                const topicSetter = \"topic-changer\";\n                const topicSetTimestamp = 1333333333;\n                const nicknames = [\"testbot\", \"@topic-changer\", \"other-user\"];\n\n                const joinmsg = {nickname: nickname, channel: channel};\n                const topicmsg = {channel: channel, topic: topic};\n                const topicwhotimemsg = {channel: channel, who: topicSetter, timestamp: topicSetTimestamp};\n                const namesmsg = {channel: channel, nicknames: nicknames};\n                const endofnamesmsg = {channel: channel};\n\n                var promise = out.join(channel)\n                .then(function (result) {\n                    const joinInfo = result.ok();\n                    logfn(inspect(joinInfo));\n                    // TODO: Is that actually the right format to raw?\n                    assert(socket.raw.calledWithExactly(format(\"JOIN :%s\", channel)));\n                    assert(joinInfo.channel === channel);\n                    assert(joinInfo.nickname === nickname);\n                    assert(equal(joinInfo.names, nicknames));\n                    assert(equal(joinInfo.topic, {\n                        topic: topic,\n                        setter: topicSetter,\n                        timestamp: topicSetTimestamp\n                    }));\n                });\n\n                messageHandler.emit(\"join\", joinmsg);\n                messageHandler.emit(\"rpl_topic\", topicmsg);\n                messageHandler.emit(\"rpl_topicwhotime\", topicwhotimemsg);\n                messageHandler.emit(\"rpl_namreply\", namesmsg);\n                messageHandler.emit(\"rpl_endofnames\", endofnamesmsg);\n\n                return promise;\n            }\n\n            it skip \"can handle multiple RPL_NAMREPLYs\" {}\n\n            it skip \"resolves to Fail(Numeric403Message) trying to join a non-existent channel\" {\n                // JOIN not_a_channel\n                //:irc.server.net 403 testbot not_a_channel :No such channel\n            }\n            it skip \"resolves to Fail(Numeric473Message) trying to join an invite only channel bot is not invited to\" {}\n            it skip \"resolves to Fail(Numeric474Message) trying to join a message bot is banned in\" {}\n            it skip \"resolves to Fail(Numeric475Message) trying to join a channel with the wrong channel key\" {}\n            it skip \"resolves to Fail(Numeric520Message) trying to join an oper only channel\" {}\n        }\n\n        describe skip \"channel keys\" {}\n        describe skip \"Interleaved joins\" {}\n\n        describe \"timeouts\" {\n            var clock;\n\n            beforeEach {\n                clock = sinon.useFakeTimers();\n            }\n\n            afterEach {\n                clock.restore();\n            }\n\n            it \"cause rejection of the promise\" (done) {\n                // Note: This should never happen. But if it does...\n                // JOIN #channel\n                // <silence>\n\n                out.join(\"#channel\")\n                .then(done) // done with a value fails the test.\n                .catch(function (err) {\n                    assert(err instanceof Error);\n                    done();\n                });\n\n                clock.tick(60 * 60 * 1000 + 1);\n            }\n        }\n    }\n\n    describe \"Whois\" {\n        describe \"A single user\" {\n            it skip \"resolves to Ok(WhoisInfo) when succeeded\" {}\n\n            describe \"Identifying\" {\n                it skip \"JoinInfo has `\\\"identified\\\": false` when user is not identified\" {}\n                it skip \"JoinInfo has `\\\"identified\\\": true, \\\"identifiedas\\\": nickname` when user is identified (307)\" {}\n                it skip \"JoinInfo has `\\\"identified\\\": true, \\\"identifiedas\\\": accountname` when user is identified (330)\" {}\n            }\n            it \"resolves to Fail(Numeric421Message) if WHOIS command is unrecognized (e.g. on Twitch.tv)\" {}\n            it \"resovles to Fail(Numeric401Message) if WHOIS non-existent nickname\" {}\n        }\n\n        describe \"timeouts\" {}\n    }\n\n    describe \"Mode\" {\n        it \"can set a single mode with an argument\" {\n            out.mode(\"#test\", \"v\", \"\", \"SomeUser\");\n            logfn(format(format(\"'%s'\", socket.raw.firstCall.args.join(\"', '\"))));\n            assert(socket.raw.calledWithExactly(\"MODE #test :+v SomeUser\"));\n        }\n    }\n\n    it \"can send private messages\" {\n        out.say(\"#test\", \"Hi\");\n        assert(socket.raw.calledWithExactly(\"PRIVMSG #test :Hi\"));\n    }\n\n    it \"can part without a reason\" {\n        out.part(\"#test\");\n        assert(socket.raw.calledWithExactly(\"PART #test\"));\n    }\n\n    it \"can part with a reason\" {\n        out.part(\"#test\", \"the reason\");\n        assert(socket.raw.calledWithExactly(\"PART #test :the reason\"));\n    }\n\n    it \"can quit without a reason\" {\n        out.quit();\n        assert(socket.raw.calledWithExactly(\"QUIT\"));\n    }\n\n    it \"can quit with a reason\" {\n        out.quit(\"the reason\");\n        assert(socket.raw.calledWithExactly(\"QUIT :the reason\"));\n    }\n\n    describe \"Kick\" {\n        it \"with a reason\" {\n            out.kick(\"#test\", \"user\", \"naughty naughty\");\n            assert(socket.raw.calledWithExactly(\"KICK #test user :naughty naughty\"));\n        }\n\n        it \"without a reason\" {\n            out.kick(\"#test\", \"user\");\n            assert(socket.raw.calledWithExactly(\"KICK #test user\"));\n        }\n    }\n}"],"sourceRoot":"/source/"}