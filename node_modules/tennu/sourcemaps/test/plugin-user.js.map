{"version":3,"sources":["/home/havvy/tennu/tennu/src/test/plugin-user.sjs"],"names":["sinon","require","assert","equal","inspect","format","install","debug","logfn","console","log","bind","UserPluginFactory","Promise","onPossiblyUnhandledRejection","undefined","ResultCtors","Ok","Fail","describe","userPlugin","client","whoisReturns","identified","identifiedas","reject","Error","beforeEach","error","whois","nickname","resolve","then","v","init","isIdentifiedAs","exports","it","isIdentifiedAs$2"],"mappings":"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","file":"plugin-user.js","sourcesContent":["const sinon = require(\"sinon\");\nconst assert = require(\"better-assert\");\nconst equal = require(\"deep-eql\");\nconst inspect = require(\"util\").inspect;\nconst format = require(\"util\").format;\nrequire(\"source-map-support\").install();\n\nconst debug = false;\nconst logfn = debug ? console.log.bind(console) : function () {};\n\nconst UserPluginFactory = require(\"../tennu_plugins/user.js\");\n\n// NOTE(Havvy): For mock whois method.\nconst Promise = require(\"bluebird\");\n// This test file has false positives.\nPromise.onPossiblyUnhandledRejection(undefined);\n\nconst ResultCtors = require(\"r-result\");\nconst Ok = ResultCtors.Ok;\nconst Fail = ResultCtors.Fail;\n\ndescribe \"User Plugin\" {\n    var userPlugin, client;\n\n    const whoisReturns = {\n        \"failure\": Fail({}),\n        \"unidentified\": Ok({\n            identified: false,\n            identifiedas: undefined\n        }),\n        \"identified-self\": Ok({\n            identified: true,\n            identifiedas: \"identified-self\"\n        }),\n        \"identified-alt\": Ok({\n            identified: true,\n            identifiedas: \"identified-self\"\n        }),\n        \"identified-other\": Ok({\n            identified: true,\n            identifiedas: \"identified-other\"\n        }),\n        \"CaSe\": Ok({\n            identified: true,\n            identifiedas: \"case\"\n        }),\n        \"error\": Promise.reject(new Error(\"An Error\"))\n    };\n\n    beforeEach {\n        logfn(/* newline */);\n\n        client = {\n            debug: logfn,\n            error: logfn,\n            whois: function (nickname) {\n                assert(nickname in whoisReturns);\n\n                return Promise.resolve(whoisReturns[nickname])\n                .then(function (v) {\n                    logfn(inspect(v));\n                    return v;\n                });\n            }\n        };\n\n        userPlugin = UserPluginFactory.init(client, {});\n    }\n\n    describe \"isIdentifiedAs\" {\n        var isIdentifiedAs;\n\n        beforeEach {\n            isIdentifiedAs = userPlugin.exports.isIdentifiedAs;\n        }\n\n        it \"returns false for unidentified nicks\" {\n            return isIdentifiedAs(\"unidentified\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === false);\n            });\n        }\n\n        it \"returns true for identified to self\" {\n            return isIdentifiedAs(\"identified-self\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === true);\n            });\n        }\n\n        it \"returns true for identified to self from an alt nickname\" {\n            return isIdentifiedAs(\"identified-alt\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === true);\n            });\n        }\n\n        it \"returns false for identified to an other nickname\" {\n            return isIdentifiedAs(\"identified-other\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === false);\n            });\n        }\n\n        it \"returns false when whois fails\" {\n            return isIdentifiedAs(\"failure\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === false);\n            });\n        }\n\n        it \"returns false when client.whois() errors\" {\n            return isIdentifiedAs(\"error\", \"identified-self\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === false);\n            });\n        }\n\n        it \"is case insensitive\" {\n            return isIdentifiedAs(\"CaSe\", \"cAsE\")\n            .then(function (isIdentifiedAs) {\n                assert(isIdentifiedAs === true);\n            })\n        }\n    }\n}"],"sourceRoot":"/source/"}