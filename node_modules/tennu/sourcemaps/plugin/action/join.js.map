{"version":3,"sources":["/home/havvy/tennu/tennu/src/plugin/action/join.sjs"],"names":["format","require","Promise","ResultCtors","Ok","Fail","module","exports","client","rawf","channel","resolve","reject","undefined","Error","joinInfo","names","nickname","topic","forChannel","handler","message","e","formatc","formatstr","onTopic","debug","onTopicWhoTime","topicWhoTime","setter","who","timestamp","onNames","concat","nicknames","onNamesEnd","unsubscribe","onJoinFail","failMessage","inspect","handlers","rpl_topic","rpl_topicwhotime","rpl_namreply","rpl_endofnames","err_nosuchchannel","err_unavailresource","err_channelisfull","err_toomanychannels","err_inviteonlychan","err_bannedfromchan","err_badchannelkey","err_needreggednick","err_operonly","on","timeout","setTimeout","error","off","clearTimeout"],"mappings":"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","file":"action/join.js","sourcesContent":["const format = require(\"util\").format;\nconst Promise = require(\"bluebird\");\nconst ResultCtors = require(\"r-result\");\nconst Ok = ResultCtors.Ok;\nconst Fail = ResultCtors.Fail;\n\nmodule.exports = function (client, rawf) {\n    return function (channel) {\n        return new Promise(function (resolve, reject) {\n            if (channel === undefined || channel === \"\") {\n                reject(new Error(\"No channel given to join action.\"));\n                return;\n            }\n\n            // TODO: Better name for this.\n            const joinInfo = {\n                names: [],\n                channel: channel,\n                nickname: client.nickname(),\n                topic: {}\n            };\n\n            // Only listen to events for the channel we care about.\n            const forChannel = function (handler) {\n                return function (message) {\n                    if (message.channel === channel) {\n                        try {\n                            handler(message);\n                        } catch (e) {\n                            reject(e);\n                        }\n                    }\n                };\n            };\n\n            const formatc = function (formatstr) {\n                return format(formatstr, channel);\n            };\n\n            // const onJoin = forChannel(function (join) {\n            //     // There's no actual data we need on the JOIN event itself.\n            // });\n\n            const onTopic = forChannel(function (topic) {\n                client.debug(\"PluginAction\", formatc(\"Handling RPL_TOPIC for %s.\"));\n                joinInfo.topic.topic = topic.topic;\n            });\n\n            const onTopicWhoTime = forChannel(function (topicWhoTime) {\n                client.debug(\"PluginAction\", formatc(\"Handling RPL_TOPICWHOTIME for %s.\"));\n                joinInfo.topic.setter = topicWhoTime.who;\n                joinInfo.topic.timestamp = topicWhoTime.timestamp;\n            });\n\n            const onNames = forChannel(function (names) {\n                client.debug(\"PluginAction\", formatc(\"Handling RPL_NAMREPLY for %s.\"));\n                joinInfo.names = joinInfo.names.concat(names.nicknames);\n            });\n\n            const onNamesEnd = forChannel(function () {\n                client.debug(\"PluginAction\", formatc(\"Handling RPL_ENDOFNAMES for %s.\"));\n                unsubscribe();\n                resolve(Ok(joinInfo));\n            });\n\n            const onJoinFail = forChannel(function (failMessage) {\n                client.debug(\"PluginAction\", formatc(\"Handling Join Error for %s.\"));\n                client.debug(\"PluginAction\", require('util').inspect(failMessage));\n                unsubscribe();\n                client.debug(\"PluginAction\", formatc(\"Resolving Ok(...) for %s.\"))\n                resolve(Fail(failMessage));\n            });\n\n            const handlers = {\n                //join: onJoin,\n                rpl_topic: onTopic,\n                rpl_topicwhotime: onTopicWhoTime,\n                rpl_namreply: onNames,\n                rpl_endofnames: onNamesEnd,\n                err_nosuchchannel: onJoinFail,\n                err_unavailresource: onJoinFail,\n                err_channelisfull: onJoinFail,\n                err_toomanychannels: onJoinFail,\n                err_inviteonlychan: onJoinFail,\n                err_bannedfromchan: onJoinFail,\n                err_badchannelkey: onJoinFail,\n                err_needreggednick: onJoinFail,\n                err_operonly: onJoinFail\n            };\n\n            client.debug(\"PluginAction\", formatc(\"Registering handlers for JOIN %s.\"));\n            client.on(handlers);\n\n            // Assume failure in an hour.\n            var timeout = setTimeout(function () {\n                unsubscribe();\n                client.error(formatc(\"Attempt to join %s failed.\"));\n                reject(new Error(formatc(\"Join attempt timed out for channel %s.\")));\n            }, 3600 * 1000);\n\n            var unsubscribe = function () {\n                client.debug(\"PluginAction\", formatc(\"Unsubscribing events for JOIN %s\"));\n                client.off(handlers);\n                clearTimeout(timeout);\n            };\n\n            client.debug(\"PluginAction\", formatc(\"Attempting to join %s.\"));\n            rawf(\"JOIN :%s\", channel);\n        });\n    };\n};"],"sourceRoot":"/source/"}