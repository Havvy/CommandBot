{"version":3,"sources":["/home/havvy/tennu/tennu/src/plugin/action/whois.sjs"],"names":["format","require","Promise","ResultCtors","Ok","Fail","chunk","module","exports","client","rawf","whois","nickname","server","multiple","Array","isArray","nicknames","some","a","Error","length","map","join","indexOf","resolve","reject","whoisInfo","username","undefined","hostname","hostmask","realname","identified","identifiedas","serverInfo","idleSeconds","loginTimestamp","secureConnection","isBot","isHelpop","isOper","formatn","formatstr","forNick","handler","message","whoisUserHandler","whoisRegisteredNickHandler","debug","whoisLoggedInHandler","whoisServerHandler","whoisIdleHandler","seconds","since","whoisChannelsHandler","channels","whoisHostHandler","ip","whoisSecureHandler","whoisBotHandler","whoisOperatorHandler","whoisHelpopHandler","endOfWhoisHandler","unsubscribe","errUnknownCommandHandler","unknownCommand","errDefaultHandler","handlers","on","timeout","setTimeout","error","off","clearTimeout"],"mappings":"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","file":"action/whois.js","sourcesContent":["const format = require(\"util\").format;\nconst Promise = require(\"bluebird\");\nconst ResultCtors = require(\"r-result\");\nconst Ok = ResultCtors.Ok;\nconst Fail = ResultCtors.Fail;\nconst chunk = require(\"chunk\");\n\nmodule.exports = function (client, rawf) {\n    // NOTE(Havvy): `multiple` should not be set by the user, it is used as a recusion flag.\n    // TODO(Havvy) Figure out what the `server` parameter does.\n    // TODO(Havvy) Move the multiple case to `whoisAll` or return a Promise<[Result<WhoisInfo, WhoisFailureMessage>], Error>`?\n    return function whois (nickname, server, multiple) {\n\n        // NOTE(Havvy): The logic in this block has two purposes.\n        // 1) Check if input is of the correct types, throw an error if not.\n        // 2) Determine whether multiple WHOISes.\n        //      If multiple, fire and forget.\n        //      If single, return a promise.\n        if (Array.isArray(nickname)) {\n            const nicknames = nickname; // rename for clarity\n            if (nicknames.some(λ[typeof # !== \"string\"])) {\n                throw new Error(\"Whois command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n            if (nicknames.length > 15) {\n                chunk(nicknames, 15)\n                .map(λ.join(','))\n                .map(λ[whois(#, server, true)]);\n            }\n        } else if (typeof nickname === \"string\" && nickname.indexOf(\",\") !== -1) {\n            multiple = true;\n        } else if (typeof nickname === \"string\") {\n            // NOOP\n        } else {\n            throw new Error(\"Whois command takes either a string (a single nick) or an array (of string nicks)\");\n        }\n\n        if (server || multiple) {\n            if (server) {\n                rawf(\"WHOIS %s %s\", server, nickname);\n            } else {\n                rawf(\"WHOIS %s\", nickname);\n            }\n            return;\n        }\n\n        return new Promise(function (resolve, reject) {\n            const whoisInfo = {\n                nickname: nickname,\n                username: undefined,\n                hostname: undefined,\n                hostmask: undefined,\n                realname: undefined,\n                identified: false,\n                identifiedas: undefined,\n                server: undefined,\n                serverInfo: undefined,\n                idleSeconds: undefined,\n                loginTimestamp: undefined,\n                secureConnection: false,\n                isBot: false,\n                isHelpop: false,\n                isOper: false\n            };\n\n            function formatn (formatstr) {\n                return format(formatstr, nickname);\n            }\n\n            function forNick (handler) {\n                return function (message) {\n                    if (message.nickname === nickname) {\n                        return handler(message);\n                    }\n                };\n            }\n\n            const whoisUserHandler = forNick(function (message) {\n                whoisInfo.username = message.username;\n                whoisInfo.hostname = message.hostname;\n                whoisInfo.hostmask = message.hostmask;\n                whoisInfo.realname = message.realname;\n            });\n\n            const whoisRegisteredNickHandler = forNick(function (message) {\n                client.debug(\"PluginAction\", format(\"%s is identified as %s\", nickname, nickname));\n                whoisInfo.identified = true;\n                whoisInfo.identifiedas = nickname;\n            });\n\n            const whoisLoggedInHandler = forNick(function (message) {\n                client.debug(\"PluginAction\", format(\"%s is identified as %s\", nickname, message.identifiedas));\n                whoisInfo.identified = true;\n                whoisInfo.identifiedas = message.identifiedas;\n            });\n\n            const whoisServerHandler = forNick(function (message) {\n                whoisInfo.server = message.server;\n                whoisInfo.serverInfo = message.serverInfo;\n            });\n\n            const whoisIdleHandler = forNick(function (message) {\n                whoisInfo.idleSeconds = message.seconds;\n                whoisInfo.loginTimestamp = message.since;\n            });\n\n            const whoisChannelsHandler = forNick(function (message) {\n                whoisInfo.channels = message.channels;\n            });\n\n            const whoisHostHandler = forNick(function (message) {\n                whoisInfo.ip = message.ip;\n            });\n\n            const whoisSecureHandler = forNick(function (message) {\n                whoisInfo.secureConnection = true;\n            });\n\n            const whoisBotHandler = forNick(function (message) {\n                whoisInfo.isBot = true;\n            });\n\n            const whoisOperatorHandler = forNick(function (message) {\n                whoisInfo.isOper = true;\n            });\n\n            const whoisHelpopHandler = forNick(function (message) {\n                whoisInfo.isHelpop = true;\n            });\n\n            const endOfWhoisHandler = forNick(function (message) {\n                unsubscribe();\n                resolve(Ok(whoisInfo));\n            });\n\n            const errUnknownCommandHandler = function (message) {\n                if (message.unknownCommand === \"whois\") {\n                    unsubscribe();\n                    resolve(Fail(message));\n                }\n            };\n\n            const errDefaultHandler = forNick(function (message) {\n                unsubscribe();\n                resolve(Fail(message));\n            });\n\n            // TODO(Havvy): Determine which whois messages are being ignored.\n            var handlers = {\n                \"rpl_whoisuser\": whoisUserHandler,\n                \"rpl_whoisregnick\": whoisRegisteredNickHandler,\n                \"rpl_whoisloggedin\": whoisLoggedInHandler,\n                \"rpl_whoisserver\": whoisServerHandler,\n                \"rpl_whoisidle\": whoisIdleHandler,\n                \"rpl_whoischannels\": whoisChannelsHandler,\n                \"rpl_whoishost\": whoisHostHandler,\n                \"rpl_whoissecure\": whoisSecureHandler,\n                \"rpl_whoisbot\": whoisBotHandler,\n                \"rpl_whoisoperator\": whoisOperatorHandler,\n                \"rpl_whoishelpop\": whoisHelpopHandler,\n                \"rpl_endofwhois\": endOfWhoisHandler,\n                \"err_unknowncommand\": errUnknownCommandHandler,\n                \"err_nosuchnick\": errDefaultHandler\n            };\n\n            client.debug(\"PluginAction\", formatn(\"Registering handlers for WHOIS %s.\"));\n            client.on(handlers);\n\n            // Assume failure in an hour.\n            var timeout = setTimeout(timeout = function () {\n                unsubscribe();\n                client.error(formatn(\"Attempt to whois %s failed.\"));\n                reject(new Error(formatn(\"Whois attempt timed out for nickname %s.\")));\n            }, 3600 * 1000);\n\n            var unsubscribe = function () {\n                client.debug(\"PluginAction\", formatn(\"Unsubscribing events for WHOIS %s\"));\n                client.off(handlers);\n                clearTimeout(timeout);\n            };\n\n            client.debug(\"PluginAction\", formatn(\"Attempting to whois %s.\"));\n            rawf(\"WHOIS %s\", nickname);\n        });\n    };\n};"],"sourceRoot":"/source/"}