{"version":3,"sources":["/home/havvy/tennu/tennu/src/plugin/action/index.sjs"],"names":["inspect","require","format","chunk","Promise","module","exports","ActionPlugin","init","client","imports","raw","line","Array","isArray","join","info","String","_socket","rawf","apply","arguments","say","target","body","forEach","a","ctcp","type","act","notice","part","channel","reason","kick","nickname","nick","newNick","quit","note","mode","plus","minus","inArgs","args","userhost","users","map","hosts","Error","who","whois"],"mappings":"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","file":"action/index.js","sourcesContent":["const inspect = require('util').inspect;\nconst format = require('util').format;\nconst chunk = require('chunk');\nconst Promise = require('bluebird');\n\nmodule.exports = ActionPlugin = {\n    init: function (client, imports) {\n        function raw (line) {\n            if (Array.isArray(line)) { line = line.join(\" \"); }\n            client.info(\"->\", String(line));\n            client._socket.raw(line);\n        }\n\n        function rawf () {\n            raw(format.apply(null, arguments));\n        }\n\n\n        function say (target, body) {\n            if (Array.isArray(body)) {\n                body.forEach(λ[say(target, #)]);\n                return;\n            }\n\n            rawf(\"PRIVMSG %s :%s\", target, body);\n        }\n\n        function ctcp (target, type, body) {\n            if (Array.isArray(body)) {\n                body.forEach(λ[ctcp(target, type, #)]);\n                return;\n            }\n            \n            if (body) {\n                say(target, format('\\u0001%s %s\\u0001', type, body));\n            } else {\n                say(target, format(\"\\u0001%s\\u0001\", type));\n            }\n        }\n\n        function act (target, body) {\n            ctcp(target, \"ACTION\", body);\n        }\n\n        function notice (target, body) {\n            if (Array.isArray(body)) {\n                body.forEach(λ[notice(target, #)]);\n                return;\n            }\n\n            rawf(\"NOTICE %s :%s\", target, body);\n        }\n\n        const join = require('./join')(client, rawf);\n\n\n        function part (channel, reason) {\n            raw(\"PART \" + channel + (reason ? \" :\" + reason: \"\"));\n        }\n\n        function kick (channel, nickname, reason) {\n            if (reason) {\n                rawf(\"KICK %s %s :%s\", channel, nickname, reason);\n            } else {\n                rawf(\"KICK %s %s\", channel, nickname);\n            }\n        }\n\n        function nick (newNick) {\n            rawf(\"NICK %s\", newNick);\n        }\n\n        function quit (reason) {\n            client.note(format(\"Quitting with reason: %s\", reason));\n            raw(\"QUIT\" + (reason ? \" :\" + reason : \"\"));\n        }\n\n        function mode (target, plus, minus, inArgs) {\n            var args = \":\";\n\n            if (plus) {\n                args += \"+\" + plus;\n            }\n\n            if (minus) {\n                args += \"-\" + minus;\n            }\n\n            if (inArgs) {\n                args += \" \" + (Array.isArray(inArgs) ? inArgs.join(' ') : inArgs);\n            }\n\n            raw([\"MODE\", target, args]);\n        }\n\n        function userhost (users) {\n            if (typeof users === 'string') {\n                rawf(\"USERHOST:%s\", users);\n            } else if (typeof users === 'array') {\n                chunk(users, 5)\n                .map(function (hosts) { return hosts.join(' '); })\n                .map(userhost);\n            } else {\n                throw new Error(\"Userhost command takes either a string (a single nick) or an array (of string nicks)\");\n            }\n        }\n\n        function who (channel) {\n            raw([\"WHO\", channel]);\n        }\n\n        const whois = require('./whois')(client, rawf);\n\n        /* To replace these functions...\n        const join = require('./join')(client, action_plugin);\n        const part = require('./part')(client, action_plugin);\n        const quit = require('./quit')(client, action_plugin);\n        const nick = require('./nick')(client, action_plugin);\n        const mode = require('./mode')(client, action_plugin);\n        const userhost = require('./userhost')(client, action_plugin);\n        const whois = require('./whois)(client, action_plugin);\n        const who = require('./who')(client, action_plugin);\n        */\n\n        return {\n            exports: {\n                raw: raw,\n                rawf: rawf,\n                say: say,\n                ctcp: ctcp,\n                act: act,\n                notice: notice,\n                join: join,\n                part: part,\n                kick: kick,\n                nick: nick,\n                quit: quit,\n                mode: mode,\n                userhost: userhost,\n                who: who,\n                whois: whois\n            }\n        };\n    }//,\n\n    //requires: \"server\";\n};"],"sourceRoot":"/source/"}